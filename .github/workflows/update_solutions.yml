name: 1. Update Solutions
on:
  workflow_dispatch:
  schedule: #run this workflow one after another (2 times total) if you want the solutions to be updated properly (the first time). otherwies, you can ignore and it will run daily
    - cron: "45 15 * * 0" # the text file wont update the initial run. from then on, it'll update properly. But loading all the solutions will take time

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Sync LeetCode Solutions
        id: sync
        uses: joshcai/leetcode-sync@v1.7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          leetcode-csrf-token: ${{ secrets.LEETCODE_CSRF_TOKEN }}
          leetcode-session: ${{ secrets.LEETCODE_SESSION }}
          destination-folder: temp_solutions
          verbose: true
          commit-header: "[LeetCode Sync]"

      - name: Check Sync Status
        run: |
          if [ "${{ steps.sync.outcome }}" == "failure" ]; then
            echo "❌ LeetCode sync failed. This usually means:"
            echo "   1. LEETCODE_CSRF_TOKEN is expired or invalid"
            echo "   2. LEETCODE_SESSION is expired or invalid"
            echo "   3. LeetCode API structure has changed"
            echo ""
            echo "To fix this:"
            echo "   1. Log into LeetCode in your browser"
            echo "   2. Open Developer Tools (F12)"
            echo "   3. Go to Network tab and refresh the page"
            echo "   4. Find a request to leetcode.com and copy the 'csrftoken' and 'LEETCODE_SESSION' cookies"
            echo "   5. Update the repository secrets with the new values"
            echo ""
            echo "⏭️  Skipping solution processing steps since no new solutions were synced."
            exit 0
          else
            echo "✅ LeetCode sync completed successfully"
          fi

      - name: Wait for Commit Propagation
        if: steps.sync.outcome == 'success'
        run: |
          echo "Waiting for commit messages to propagate..."
          sleep 15
          git fetch --all
      - name: Create Sync Details File
        if: steps.sync.outcome == 'success'
        run: |
          # Initialize file with header
          echo "# LeetCode Solution Details" > sync_details.txt
          if [ -d "temp_solutions" ]; then
            while IFS= read -r file; do
              dir=$(dirname "$file")
              base=$(basename "$dir")
              # Expect folder name format "NNNN-..."
              if [[ "$base" =~ ^([0-9]+)- ]]; then
                probnum="${BASH_REMATCH[1]}"
                # Get latest commit message for this file
                commit_msg=$(git log -1 --pretty=format:%B -- "$file" || echo "")
                # Default values if not found
                rt="0"
                rtpct="100"
                mem="0"
                mempct="100"
                # Look for "[LeetCode Sync]" in the commit message
                if [[ "$commit_msg" =~ \[LeetCode\ Sync\] ]]; then
                  if [[ "$commit_msg" =~ Runtime[[:space:]]*-[[:space:]]*([0-9.]+)[[:space:]]*ms[[:space:]]*\(([0-9.]+)%\) ]]; then
                    rt="${BASH_REMATCH[1]}"
                    rtpct="${BASH_REMATCH[2]}"
                  fi
                  if [[ "$commit_msg" =~ Memory[[:space:]]*-[[:space:]]*([0-9.]+)[[:space:]]*MB[[:space:]]*\(([0-9.]+)%\) ]]; then
                    mem="${BASH_REMATCH[1]}"
                    mempct="${BASH_REMATCH[2]}"
                  fi
                fi
                echo "${probnum}:${rt},${rtpct},${mem},${mempct}" >> sync_details.txt
              fi
            done < <(find temp_solutions -type f \( -name "*.py" -o -name "*.java" -o -name "*.cpp" -o -name "*.sql" \))
            # Sort (except header) numerically by problem number
            (head -n1 sync_details.txt && tail -n +2 sync_details.txt | sort -t: -k1n) > temp && mv temp sync_details.txt
          fi
      - name: Display Sync Details
        if: steps.sync.outcome == 'success'
        run: |
          echo "Contents of sync_details.txt:"
          cat sync_details.txt
      - name: Commit Sync Details
        if: steps.sync.outcome == 'success'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add sync_details.txt
          git commit -m "Update sync details" || echo "No sync detail changes"
      - name: Push Changes
        if: steps.sync.outcome == 'success'
        run: |
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if git pull --rebase && git push; then
              break
            fi
            echo "Push attempt $attempt failed. Retrying..."
            attempt=$((attempt + 1))
            sleep 5
          done
          if [ $attempt -gt $max_attempts ]; then
            echo "Failed to push changes after $max_attempts attempts"
            exit 1
          fi
